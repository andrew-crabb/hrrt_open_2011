// DUCom.idl : IDL source for DUCom.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (DUCom.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(C0AA4C6E-2E3E-4512-8435-114CE27E07FD),
	
		helpstring("IDUMain Interface"),
		pointer_default(unique)
	]
	interface IDUMain : IUnknown
	{
		[helpstring("method Acquire_Singles_Data")] HRESULT Acquire_Singles_Data([in] long DataMode, [in] long Configuration, [in] long HeadSelect[16], [in] long SourceSelect[16], [in] long LayerSelect[16], [in] long AcquisitionType, [in] long Amount, [in] long lld, [in] long uld, [out] long *pStatus);
		[helpstring("method Acquire_Coinc_Data")] HRESULT Acquire_Coinc_Data([in] long DataMode, [in] long Configuration, [in] long HeadSelect[16], [in] long LayerSelect[16], [in] long ModulePair, [in] long Transmission, [in] long AcquisitionType, [in] long Amount, [in] long lld, [in] long uld, [out] long *pStatus);
		[helpstring("method Acquisition_Progress")] HRESULT Acquisition_Progress([out] long *pPercent, [out] long HeadStatus[16]);
		[helpstring("method Current_Head_Data")] HRESULT Current_Head_Data([in] long DataMode, [in] long Configuration, [in] long Head, [in] long Layer, [out] long *pTime, [out] long *pSize, [out, size_is(1, *pSize)] long** Data, [out] long *pStatus);
		[helpstring("method Current_Block_Data")] HRESULT Current_Block_Data([in] long DataMode, [in] long Configuration, [in] long Head, [in] long Layer, [in] long Block, [out] long *pSize, [out, size_is(1, *pSize)] long** Data, [out] long *pStatus);
		[helpstring("method Download_CRM")] HRESULT Download_CRM([in] long Configuration, [in] long BlockSelect[2048], [out] long BlockStatus[2048]);
		[helpstring("method Get_Stored_CRM")] HRESULT Get_Stored_CRM([in] long Configuration, [in] long Head, [in] long Layer, [in] long Block, [out] unsigned char CRM[65536], [out] long *pStatus);
		[helpstring("method Get_Stored_Crystal_Position")] HRESULT Get_Stored_Crystal_Position([in] long Configuration, [in] long Head, [in] long Layer, [out] long CrystalPosition[278784], [out] long *pStatus);
		[helpstring("method Get_Stored_Crystal_Time")] HRESULT Get_Stored_Crystal_Time([in] long Configuration, [in] long Head, [in] long Layer, [out] long CrystalTime[32768], [out] long *pStatus);
		[helpstring("method Get_Stored_Energy_Peaks")] HRESULT Get_Stored_Energy_Peaks([in] long Configuration, [in] long Head, [in] long Layer, [out] long CrystalPeaks[32768], [out] long *pStatus);
		[helpstring("method Get_Stored_Settings")] HRESULT Get_Stored_Settings([in] long Configuration, [in] long Head, [out] long Settings[4096], [out] long *pStatus);
		[helpstring("method List_Setup_Archives")] HRESULT List_Setup_Archives([in] long Configuration, [in] long HeadSelect[16], [out] long *pNumFound, [out, size_is(1, *pNumFound*2048)] unsigned char** List, [out] long *pStatus);
		[helpstring("method Load_Setup_Archive")] HRESULT Load_Setup_Archive([in] unsigned char Archive[2048], [in] long HeadSelect[16], [out] long HeadStatus[16]);
		[helpstring("method Remove_Setup_Archive")] HRESULT Remove_Setup_Archive([in] unsigned char Archive[2048], [out] long *pStatus);
		[helpstring("method Save_Setup_Archive")] HRESULT Save_Setup_Archive([in] long Configuration, [in] long HeadSelect[16], [out] long HeadStatus[16]);
		[helpstring("method Store_CRM")] HRESULT Store_CRM([in] long Configuration, [in] long Head, [in] long Layer, [in] long Block, [in] unsigned char CRM[65536], [out] long *pStatus);
		[helpstring("method Store_Crystal_Position")] HRESULT Store_Crystal_Position([in] long Configuration, [in] long Head, [in] long Layer, [in] long CrystalPosition[278784], [out] long *pStatus);
		[helpstring("method Store_Crystal_Time")] HRESULT Store_Crystal_Time([in] long Send, [in] long Configuration, [in] long Head, [in] long Layer, [in] long CrystalTime[32768], [out] long *pStatus);
		[helpstring("method Store_Energy_Peaks")] HRESULT Store_Energy_Peaks([in] long Send, [in] long Configuration, [in] long Head, [in] long Layer, [in] long CrystalPeaks[32768], [out] long *pStatus);
		[helpstring("method Store_Settings")] HRESULT Store_Settings([in] long Send, [in] long Configuration, [in] long Head, [in] long Settings[4096], [out] long *pStatus);
		[helpstring("method Read_Master")] HRESULT Read_Master([in] long DataMode, [in] long Configuration, [in] long Head, [in] long Layer, [out] long *pSize, [out, size_is(1, *pSize)] long** Data, [out] long *pStatus);
		[helpstring("method Write_Master")] HRESULT Write_Master([in] long DataMode, [in] long Configuration, [in] long Head, [in] long Layer, [in] long Size, [in, size_is(1, Size)] long** Data, [out] long *pStatus);
		[helpstring("method Get_Master_Crystal_Location")] HRESULT Get_Master_Crystal_Location([in] long Configuration, [in] long Head, [in] long Layer, [out] long CrystalPosition[278784], [out] long *pStatus);
		[helpstring("method Archive_Progress")] HRESULT Archive_Progress([out] long *pPercent, [out] unsigned char StageStr [2048], [out] long HeadStatus[16]);
		[helpstring("method Archive_Abort")] HRESULT Archive_Abort();
		[helpstring("method Acquisition_Abort")] HRESULT Acquisition_Abort();
		[helpstring("method KillSelf")] HRESULT KillSelf();
		[helpstring("method Save_Head")] HRESULT Save_Head([in] long Configuration, [in] long Head, [out] long *pSize, [out, size_is(1, *pSize)] unsigned char** buffer, [out] long *pStatus);
		[helpstring("method Load_Head")] HRESULT Load_Head([in] long Configuration, [in] long Head, [in] long Size, [in, size_is(1, Size)] unsigned char** buffer, [out] long *pStatus);
		[helpstring("method Acquisition_Statistics")] HRESULT Acquisition_Statistics([out] unsigned long *pNumKEvents, [out] unsigned long *pBadAddress, [out] unsigned long *pSyncProb);
	};

[
	uuid(5224341A-A9F7-4094-8851-FAE76C104104),
	version(1.0),
	helpstring("DUCom 1.0 Type Library")
]
library DUCOMLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(3FA04976-1CFD-4C2E-A4E7-865D208DCC3E),
		helpstring("DUMain Class")
	]
	coclass DUMain
	{
		[default] interface IDUMain;
	};
};
