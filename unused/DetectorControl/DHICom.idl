// DHICom.idl : IDL source for DHICom.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (DHICom.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(82C49018-554A-4AD8-92E9-25E8849CAD33),
	
		helpstring("IAbstract_DHI Interface"),
		pointer_default(unique)
	]
	interface IAbstract_DHI : IUnknown
	{
		typedef struct Information {
			long Address;
			long Mode;
			long Config;
			long Layer;
			long LLD;
			long ULD;
			long SLD;
		} HeadInfo;

		typedef struct PhysicalInformation {
			long Address;
			long HighVoltage;
			float Plus5Volts;
			float Minus5Volts;
			float OtherVoltage;
			float LTI_Temperature;
			float DHI_Temperature[16];
		} PhysicalInfo;

		[helpstring("method Error_Lookup")] HRESULT Error_Lookup([in] long ErrorCode, [out] long *Code, [out] unsigned char ErrorString[2048]);
		[helpstring("method Zap")] HRESULT Zap([in] long ZapMode, [in] long Configuration, [in] long Head, [in] long Block, [out] long *pStatus);
		[helpstring("method Determine_Delay")] HRESULT Determine_Delay([in] long Configuration, [in] long Head, [in] long Block, [out] long *pStatus);
		[helpstring("method Determine_Offsets")] HRESULT Determine_Offsets([in] long Configuration, [in] long Head, [in] long Block, [out] long *pStatus);
		[helpstring("method Coincidence_Mode")] HRESULT Coincidence_Mode([in] long Transmission, [in] long ModulePairs, [out] long *pStatus);
		[helpstring("method Time_Mode")] HRESULT Time_Mode([in] long Transmission, [in] long ModulePairs, [out] long *pStatus);
		[helpstring("method PassThru_Mode")] HRESULT PassThru_Mode([in] long Head[16], [in] long PtSrc[16], [out] long *pStatus);
		[helpstring("method TagWord_Mode")] HRESULT TagWord_Mode([out] long *pStatus);
		[helpstring("method Test_Mode")] HRESULT Test_Mode([out] long *pStatus);
		[helpstring("method Set_Head_Mode")] HRESULT Set_Head_Mode([in] long DataMode, [in] long Configuration, [in] long Head, [in] long Layer, [in] long Block, [in] long LLD, [in] long ULD, [out] long *pStatus);
		[helpstring("method Initialize_Scan")] HRESULT Initialize_Scan([in] long Transmission, [in] long ModulePairs, [in] long Configuration, [in] long Layer, [in] long LLD, [in] long ULD, [out] long *pStatus);
		[helpstring("method Start_Scan")] HRESULT Start_Scan([out] long *pStatus);
		[helpstring("method Stop_Scan")] HRESULT Stop_Scan([out] long *pStatus);
		[helpstring("method Refresh_Analog_Settings")] HRESULT Refresh_Analog_Settings([in] long Configuration, [in] long Head, [out] long *pStatus);
		[helpstring("method Get_Analog_Settings")] HRESULT Get_Analog_Settings([in] long Configuration, [in] long Head, [out] long Settings[4096], [out] long *pStatus);
		[helpstring("method Set_Analog_Settings")] HRESULT Set_Analog_Settings([in] long Configuration, [in] long Head, [in] long Settings[4096], [out] long *pStatus);
		[helpstring("method File_Upload")] HRESULT File_Upload([in] long Head, [in] unsigned char Filename[2048], [out] long *Filesize, [out] unsigned long *CheckSum, [out, size_is(1, *Filesize)] unsigned char** buffer, [out] long *pStatus);
		[helpstring("method File_Download")] HRESULT File_Download([in] long Head, [in] long Filesize, [in] unsigned long CheckSum, [in] unsigned char Filename[2048], [in, size_is(1, Filesize)] unsigned char** buffer, [out] long *pStatus);
		[helpstring("method High_Voltage")] HRESULT High_Voltage([in] long OnOff, [out] long *pStatus);
		[helpstring("method Point_Source")] HRESULT Point_Source([in] long Head, [in] long OnOff, [out] long *pStatus);
		[helpstring("method Point_Source_Status")] HRESULT Point_Source_Status([in] long Head, [out] long *pOnOff, [out] long *pStatus);
		[helpstring("method Get_Statistics")] HRESULT Get_Statistics([out] long Statistics[19], [out] long *pStatus);
		[helpstring("method Singles")] HRESULT Singles([in] long Head, [in] long SinglesType, [out] long Singles[128], [out] long *pStatus);
		[helpstring("method Progress")] HRESULT Progress([in] long Head, [out] long *pPercent, [out] long *pStatus);
		[helpstring("method Ping")] HRESULT Ping([in] long Head, [out] unsigned char BuildID[2048], [out] long *pStatus);
		[helpstring("method Report_Temperature")] HRESULT Report_Temperature([out] float Temperature[35], [out] long *pStatus);
		[helpstring("method Report_Voltage")] HRESULT Report_Voltage([out] float Voltage[64], [out] long *pStatus);
		[helpstring("method Report_HRRT_High_Voltage")] HRESULT Report_HRRT_High_Voltage([out] long Voltage[80], [out] long *pStatus);
		[helpstring("method Hardware_Configuration")] HRESULT Hardware_Configuration([out] long *Filesize, [out] unsigned long *CheckSum, [out, size_is(1, *Filesize)] unsigned char** buffer, [out] long *pStatus);
		[helpstring("method Check_Head_Mode")] HRESULT Check_Head_Mode([in] long Head, [out] long *pDataMode, [out] long *pConfiguration, [out] long *pLayer, [out] long *pLLD, [out] long *pULD, [out] long *pStatus);
		[helpstring("method Check_CP_Mode")] HRESULT Check_CP_Mode([out] long *pMode, [out] long *pStatus);
		[helpstring("method Set_Temperature_Limits")] HRESULT Set_Temperature_Limits([in] float Low, [in] float High, [out] long *pStatus);
		[helpstring("method Reset_CP")] HRESULT Reset_CP([in] long Reset, [out] long *pStatus);
		[helpstring("method Reset_Head")] HRESULT Reset_Head([in] long Head, [out] long *pStatus);
		[helpstring("method Load_RAM")] HRESULT Load_RAM([in] long Configuration, [in] long Head, [in] long RAM_Type, [out] long *pStatus);
		[helpstring("method Time_Window")] HRESULT Time_Window([in] long WindowSize, [out] long *pStatus);
		[helpstring("method OS_Command")] HRESULT OS_Command([in] long Head, [in] unsigned char CommandString[2048], [out] long *pStatus);
		[helpstring("method Pass_Command")] HRESULT Pass_Command([in] long Head, [in] unsigned char CommandString[2048], [out] unsigned char ResponseStr[2048], [out] long *pStatus);
		[helpstring("method Tag_Insert")] HRESULT Tag_Insert([in] long Size, [in, size_is(1, Size)] unsigned hyper** Tagword, [out] long *pStatus);
		[helpstring("method Tag_Control")] HRESULT Tag_Control([in] long SinglesTag_OffOn, [in] long TimeTag_OffOn, [out] long *pStatus);
		[helpstring("method Transmission_Trajectory")] HRESULT Transmission_Trajectory([in] long Transaxial_Speed, [in] long Axial_Step, [out] long *pStatus);
		[helpstring("method Diagnostics")] HRESULT Diagnostics([out] long *pResult, [out] long *pStatus);
		[helpstring("method Force_Reload")] HRESULT Force_Reload();
		[helpstring("method Health_Check")] HRESULT Health_Check([out] long *pNumFailed, [out, size_is(1,*pNumFailed)] long **Failed, [out] long *pStatus);
		[helpstring("method DataStream")] HRESULT DataStream([in] long OnOff, [out] long *pStatus);
		[helpstring("method Initialize_PET")] HRESULT Initialize_PET([in] long ScanType, [in] long LLD, [in] long ULD, [out] long *pStatus);
		[helpstring("method Head_Status")] HRESULT Head_Status([out] long *pNumHeads, [out, size_is(1, *pNumHeads)] HeadInfo **Info, [out] long *pStatus);
		[helpstring("method CountRate")] HRESULT CountRate([out] long *pCorrectedSingles, [out] long *pUncorrectedSingles, [out] long *pPrompts, [out] long *pRandoms, [out] long *pScatters, [out] long *pStatus);
		[helpstring("method Ring_Singles")] HRESULT Ring_Singles([out] long *pNumRings, [out, size_is(1, *pNumRings)] long** RingSingles, [out] long *pStatus);
		[helpstring("method KillSelf")] HRESULT KillSelf();
		[helpstring("method SetLog")] HRESULT SetLog([in] long OnOff, [out] long *pStatus);
		[helpstring("method Report_Temperature_Voltage")] HRESULT Report_Temperature_Voltage([out] float *pCP_Temperature, [out] float *pMinimum_Temperature, [out] float *pMaximum_Temperature, [out] long *pNumber_DHI_Temperatures, [out] long *pNumHeads, [out, size_is(1, *pNumHeads)] PhysicalInfo **Info, [out] long *pStatus);
		[helpstring("method Get_Block_Crystal_Position")] HRESULT Get_Block_Crystal_Position([in] long Head, [in] long Block, [out] long Peaks[512], [out] long *pStatus);
		[helpstring("method Get_Block_Crystal_Peaks")] HRESULT Get_Block_Crystal_Peaks([in] long Head, [in] long Block, [out] long Peaks[256], [out] long *pStatus);
		[helpstring("method Get_Block_Time_Correction")] HRESULT Get_Block_Time_Correction([in] long Head, [in] long Block, [out] long Correction[256], [out] long *pStatus);
		[helpstring("method Set_Block_Time_Correction")] HRESULT Set_Block_Time_Correction([in] long Head, [in] long Block, [in] long Correction[256], [out] long *pStatus);
		[helpstring("method Set_Block_Crystal_Peaks")] HRESULT Set_Block_Crystal_Peaks([in] long Head, [in] long Block, [in] long Peaks[256], [out] long *pStatus);
		[helpstring("method Set_Block_Crystal_Position")] HRESULT Set_Block_Crystal_Position([in] long Head, [in] long Block, [in] long Peaks[512], [in] long StdDev, [out] long *pStatus);
		[helpstring("method Build_CRM")] HRESULT Build_CRM([in] long Head, [in] long Block, [out] long *pStatus);
		[helpstring("method Last_Async_Message")] HRESULT Last_Async_Message([out] unsigned char LastMsg[2048]);
	};

[
	uuid(2A00BAA8-C97E-494A-A79E-D58C2A7F9264),
	version(1.0),
	helpstring("DHICom 1.0 Type Library")
]
library DHICOMLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(96686904-6ECB-46AC-B4F2-F839C61C1C7A),
		helpstring("Abstract_DHI Class")
	]
	coclass Abstract_DHI
	{
		[default] interface IAbstract_DHI;
	};
};
